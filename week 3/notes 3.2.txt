
---------------------------------------------TOPICS----------------------------------------------------

1.Fetch()
2.Hashing
3.Encryption
4.JWT
5.jwt.verify()
6.jwt.sign()






---------------------------------- Fetch()-------------------------------------------------------

Browser provides you function so that you can send request to server and take back the response. 
i.e Fetch.

-Part of the javascript runtime. - NOT SUPPOSE TO BE PART OF JAVASCRIPT .
A website needs to hit other backend servers.

Fetch()- 
It lets you fetch data from backend.
Its a asynchronous call.

--Fetching default itself takes the GET route request.

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <script>

        async function getAnimalData(){
            const response = await fetch("https://fakerapi.it/api/v1/persons");
            const finalData = await response.json();      
        }

    </script>

    <button onclick="getAnimalData()">Get animal data</button>
    
</body>

</html>

////////////////////////////////////////////////////////////////////////////////////////////////////////

----------------------------------------------- Authentication ------------------------------------------

Before going to authentication lets understand some crpytography jargons

1.Hashing:-

-We hash our password before store them into database.
-converting a simple string into something complicated gibrish.
-A hash code never convert backs to string.
-For verification same string get converted into hash code and hash code is compared to the hash code already present.

- Password---------------> Hashcode

2.Encryption:-

- your string get converted into something gibrish and that encrypted data can back converted to string also.
- It is 2 way.
- A secret key is needed to decrypt the data.

3. JWT (Json web toknes):-

jwt is mainly used to create tokens.

-json - Only works for json data. 
-Web -  Used it in a web.
-Tokens - The input is converted and generates a string known a token.

Using Jwt ur input gets converted into some output and whomesover having that output can produce the same input.

Conversion anyone can do but verification can't there is something called jwt.verify() function that verifies the password and the input . It is similar to bank anyone can see the check but only the bank can verify the cheque.

4. Local Storage:-



 // Its like when ur signup you send the username and password.
 -Your backend first converts the data into hash.
 -Then checks from the database whether the credentials are correct or not.
 -If credentials are correct then backend send the jwt.
 -When the clients get back the jwt it gets stored in browsers localStorage.set(token , jwt) until user get logged out.
 -So every time user enter according to logic ur token get pick up and users doesn't have to send his username and password.

 Databases:-

